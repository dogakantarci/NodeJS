const sinon = require('sinon');
const httpMocks = require('node-mocks-http');
const bookController = require('../../src/controllers/bookController');
const BookService = require('../../src/services/bookService');

describe('BookController Tests', () => {
    let mockResponse;

    beforeEach(() => {
        mockResponse = httpMocks.createResponse();
    });

    afterEach(() => {
        sinon.restore();
    });

    it('should fetch all books successfully', async () => {
        const mockRequest = httpMocks.createRequest();
        const fakeBooks = [{ id: '1', title: 'Test Book' }];
        
        const getAllBooksStub = sinon.stub(BookService, 'getAllBooks').resolves(fakeBooks);

        await bookController.getAllBooks(mockRequest, mockResponse);

        const responseData = JSON.parse(mockResponse._getData());
        expect(getAllBooksStub.calledOnce).toBe(true);
        expect(responseData).toEqual(fakeBooks);
        expect(mockResponse.statusCode).toBe(200);
    });

    it('should handle errors gracefully', async () => {
        const mockRequest = httpMocks.createRequest();
        const errorMessage = 'Something went wrong';

        const getAllBooksStub = sinon.stub(BookService, 'getAllBooks').rejects(new Error(errorMessage));

        await bookController.getAllBooks(mockRequest, mockResponse);

        const responseData = JSON.parse(mockResponse._getData());
        expect(getAllBooksStub.calledOnce).toBe(true);
        expect(responseData.message).toBe('Kitapları alma hatası');
        expect(mockResponse.statusCode).toBe(500);
    });

    it('should fetch a book by ID', async () => {
        const mockRequest = httpMocks.createRequest({
            params: { id: '1' },
        });
        const fakeBook = { id: '1', title: 'Mock Book' };

        const getBookByIdStub = sinon.stub(BookService, 'getBookById').resolves(fakeBook);

        await bookController.getBookById(mockRequest, mockResponse);

        const responseData = JSON.parse(mockResponse._getData());
        expect(getBookByIdStub.calledOnce).toBe(true);
        expect(responseData).toEqual(fakeBook);
        expect(mockResponse.statusCode).toBe(200);
    });
});

