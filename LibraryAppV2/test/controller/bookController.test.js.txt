const request = require('supertest');
const express = require('express');
const bookController = require('../../src/controllers/bookController');
const BookService = require('../../src/services/bookService');
require('../../src/exceptions/HttpException');
const { HTTPStatusCode } = require('../../src/utils/HttpStatusCode');

// Mock BookService
jest.mock('../../src/services/bookService');

const app = express();
app.use(express.json());
app.get('/books', bookController.getAllBooks);
app.get('/books/:id', bookController.getBookById);
app.post('/books', bookController.createBook);
app.put('/books/:id', bookController.updateBook);
app.delete('/books/:id', bookController.deleteBook);

describe('BookController Tests', () => {
    describe('GET /books', () => {
        it('should return all books', async () => {
            const books = [{ title: 'Book 1', author: 'Author 1' }];
            BookService.getAllBooks.mockResolvedValueOnce(books); // Mock BookService method

            const response = await request(app).get('/books');

            expect(response.status).toBe(HTTPStatusCode.Ok);
            expect(response.body).toEqual(books);
        });

        it('should handle errors when fetching books', async () => {
            const errorMessage = 'Database error';
            BookService.getAllBooks.mockRejectedValueOnce(new Error(errorMessage)); // Simulate error

            const response = await request(app).get('/books');

            expect(response.status).toBe(HTTPStatusCode.InternalServerError);
            expect(response.body.message).toContain('Kitapları alma hatası');
        });
    });

    describe('GET /books/:id', () => {
        it('should return a book by id', async () => {
            const book = { title: 'Book 1', author: 'Author 1' };
            const bookId = '605c72ef153207001f3b1b4';
            BookService.getBookById.mockResolvedValueOnce(book); // Mock BookService method

            const response = await request(app).get(`/books/${bookId}`);

            expect(response.status).toBe(HTTPStatusCode.Ok);
            expect(response.body).toEqual(book);
        });

        it('should return 404 if the book is not found', async () => {
            const bookId = '605c72ef153207001f3b1b4';
            BookService.getBookById.mockResolvedValueOnce(null); // Simulate book not found

            const response = await request(app).get(`/books/${bookId}`);

            expect(response.status).toBe(HTTPStatusCode.NotFound);
            expect(response.body.message).toBe('Kitap bulunamadı');
        });

        it('should handle errors when fetching a book', async () => {
            const errorMessage = 'Database error';
            const bookId = '605c72ef153207001f3b1b4';
            BookService.getBookById.mockRejectedValueOnce(new Error(errorMessage)); // Simulate error

            const response = await request(app).get(`/books/${bookId}`);

            expect(response.status).toBe(HTTPStatusCode.InternalServerError);
            expect(response.body.message).toContain('Kitap alma hatası');
        });
    });

    describe('POST /books', () => {
        it('should create a new book', async () => {
            const book = { title: 'New Book', author: 'New Author' };
            BookService.createBook.mockResolvedValueOnce(book); // Mock BookService method

            const response = await request(app).post('/books').send(book);

            expect(response.status).toBe(HTTPStatusCode.Created);
            expect(response.body).toEqual(book);
        });

        it('should return 400 if required fields are missing', async () => {
            const response = await request(app).post('/books').send({});

            expect(response.status).toBe(HTTPStatusCode.BadRequest);
            expect(response.body.message).toBe('Tüm alanlar gereklidir: title, author, publishedDate');
        });
    });

    describe('PUT /books/:id', () => {
        it('should update a book', async () => {
            const bookId = '605c72ef153207001f3b1b4';
            const updatedBook = { title: 'Updated Book', author: 'Updated Author' };
            BookService.updateBook.mockResolvedValueOnce(updatedBook); // Mock BookService method

            const response = await request(app).put(`/books/${bookId}`).send(updatedBook);

            expect(response.status).toBe(HTTPStatusCode.Ok);
            expect(response.body).toEqual(updatedBook);
        });

        it('should return 404 if the book is not found', async () => {
            const bookId = '605c72ef153207001f3b1b4';
            BookService.updateBook.mockResolvedValueOnce(null); // Simulate book not found

            const response = await request(app).put(`/books/${bookId}`).send({});

            expect(response.status).toBe(HTTPStatusCode.NotFound);
            expect(response.body.message).toBe('Kitap bulunamadı');
        });
    });

    describe('DELETE /books/:id', () => {
        it('should delete a book', async () => {
            const bookId = '605c72ef153207001f3b1b4';
            BookService.deleteBook.mockResolvedValueOnce({}); // Mock BookService method

            const response = await request(app).delete(`/books/${bookId}`);

            expect(response.status).toBe(HTTPStatusCode.NoContent);
            expect(response.body.message).toBe('Kitap silindi');
        });

        it('should return 404 if the book is not found', async () => {
            const bookId = '605c72ef153207001f3b1b4';
            BookService.deleteBook.mockResolvedValueOnce(null); // Simulate book not found

            const response = await request(app).delete(`/books/${bookId}`);

            expect(response.status).toBe(HTTPStatusCode.NotFound);
            expect(response.body.message).toBe('Kitap bulunamadı');
        });
    });
});
